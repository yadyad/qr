package com.zs.cws.schooladmin.principalmeeting.controller;

import java.security.Principal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.zs.cws.login.LoginModel;
import com.zs.cws.schooladmin.myclass.dao.MyClassDAO;
import com.zs.cws.schooladmin.principalmeeting.dao.PrincipalMeetingDAO;
import com.zs.cws.schooladmin.principalmeeting.model.PrincipalMeetingModel;
import com.zs.cws.schooladmin.principalmeeting.model.PrincipalMeetingStatusModel;
import com.zs.cws.schooladmin.principalmeeting.repository.PrincipalMeetingRepository;
import com.zs.cws.schooladmin.principalmeeting.repository.PrincipalMeetingStatusRepository;
import com.zs.cws.superadmin.schooldivision.dao.SchoolDivDAO;
import com.zs.cws.superadmin.schoolstaff.dao.SchoolStaffDAO;
import com.zs.cws.superadmin.schoolstaff.model.SchoolStaffModel;
import com.zs.cws.superadmin.student.dao.StudentDAO;
import com.zs.cws.utils.GlobalVariables;

@Controller
@RequestMapping("schooladmin/principalmeeting")
public class PrincipalMeetingController {
	@Autowired
	SchoolStaffDAO schoolStaffDAO;
	@Autowired
	PrincipalMeetingDAO principalMeetingDAO;
	@Autowired
	PrincipalMeetingStatusRepository meetingStatusRepository;

	@Autowired
	StudentDAO studentDAO;

	@Autowired
	MyClassDAO myClassDAO;
	
	@Autowired
	SchoolDivDAO schoolDivDAO;

	static Integer[] SELECTED_DIVISIONS;
	static Integer[] SELECTED_SUBJECTS;
	@Autowired
	PrincipalMeetingRepository meetingRequestRepository;

	@RequestMapping()
	public ModelAndView KudosHome() {
		ModelAndView modelAndView = new ModelAndView("school_admin_principal_meeting");
		modelAndView.addObject("staffCount", schoolStaffDAO.getStaffCount(GlobalVariables.SCHOOL_ID));
		modelAndView.addObject("divisionCount", schoolDivDAO.getDivisionCount(GlobalVariables.SCHOOL_ID));
		modelAndView.addObject("studentCount", studentDAO.getStudentsCount(GlobalVariables.SCHOOL_ID));
		return modelAndView;
	}

	@RequestMapping(value = "/staffList", method = RequestMethod.GET)
	public @ResponseBody Object listAllSchoolStaff() {
		List<SchoolStaffModel> staffList = schoolStaffDAO.getStaffBySchoolForMyClass(GlobalVariables.SCHOOL_ID);
		return staffList;
	}

	@RequestMapping(value = "/meetingList", method = RequestMethod.GET)
	public @ResponseBody Object listAllMeetings() {
		List<PrincipalMeetingModel> meetingList = principalMeetingDAO.getAllMeetings(GlobalVariables.SCHOOL_ID);
		return meetingList;
	}

	@RequestMapping(value = "/meetingTypes", method = RequestMethod.GET)
	public @ResponseBody Object listMeetingTypes() {
		Map<String, String> meetingMap = new HashMap<>();
		meetingMap.put("All", "All");
		meetingMap.put("Teaching", "Teaching");
		return meetingMap;
	}

	@RequestMapping(value = { "/post" }, method = RequestMethod.POST, produces = { "application/json" })
	public @ResponseBody Object getJsonData(HttpServletRequest request, @RequestBody PrincipalMeetingModel meetingModel,
			HttpSession session, Principal principal) {
		List<SchoolStaffModel> staffList = new ArrayList<>();
		if (meetingModel.getMeetingType().equals("Teaching")) {
			staffList = myClassDAO.getMyClassDetails1(SELECTED_DIVISIONS, SELECTED_SUBJECTS, GlobalVariables.SCHOOL_ID);
		} else {
			staffList = schoolStaffDAO.getStaffsForMeeting(GlobalVariables.SCHOOL_ID);
		}

		System.out.println("Staff List::>" + staffList.toString());
		LoginModel loginModel = (LoginModel) session.getAttribute("loginModel");
		meetingModel.setSchoolStaffModel(loginModel.getSchoolStaffModel());
		meetingModel.setSchoolModel(meetingModel.getSchoolStaffModel().getSchoolModel());
		meetingRequestRepository.save(meetingModel);

		if (meetingModel.getMeetingRequestID() != 0) {
			for (SchoolStaffModel staffModel : staffList) {
				PrincipalMeetingStatusModel meetingStatusModel = new PrincipalMeetingStatusModel();
				meetingStatusModel.setPrincipalMeetingModel(meetingModel);
				meetingStatusModel.setStatus(0);
				meetingStatusModel.setSchoolStaffModel(staffModel);
				meetingStatusModel.setSchoolModel(staffModel.getSchoolModel());
				meetingStatusRepository.save(meetingStatusModel);
			}
		}

		return meetingModel;
	}

	@RequestMapping(value = "/selectedDivisions/{id}", method = RequestMethod.GET)
	public @ResponseBody Object divisionSelection(@PathVariable("id") Integer[] divisons) {
		SELECTED_DIVISIONS = divisons;
		return true;
	}

	@RequestMapping(value = "/selectedSubjects/{id}", method = RequestMethod.GET)
	public @ResponseBody Object subjectSelection(@PathVariable("id") Integer[] subjects) {
		SELECTED_SUBJECTS = subjects;
		return true;
	}

	@RequestMapping(value = "/deleteSelectedMeetings/{id}", method = RequestMethod.GET)
	public @ResponseBody Object deleteSelectedMeetings(@PathVariable("id") int[] meetingIdies) {
		for (int meetingID : meetingIdies) {
			meetingRequestRepository.delete(meetingID);
		}
		return true;
	}
	
	
}
