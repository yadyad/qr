package com.zs.cws.utils;

import java.io.File;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;

import javax.servlet.http.HttpServletRequest;

public class FileAction {
	// METHOD FOR DELETE FILES OR FOLDERS FROM THE WEB
	public static boolean deleteFile(HttpServletRequest request, String path) {
		String realPath = request.getSession().getServletContext().getRealPath(path);
		File file = new File(realPath);
		if (file.delete()) {
			return true;
		} else {
			return false;
		}
	}

	// METHOD FOR GET THE URL
	public static String getURLBase(HttpServletRequest request) {
		URL requestURL = null;
		String port = null;
		try {
			requestURL = new URL(request.getRequestURL().toString());
			port = requestURL.getPort() == -1 ? "" : ":" + requestURL.getPort();

		} catch (MalformedURLException me) {
			me.printStackTrace();
		}
		return requestURL.getProtocol() + "://" + requestURL.getHost() + port + "/clubwizard-school/";
	}

	// METHOD FOR GET THE FILE SIZE IN MB
	public static double getFileSize(HttpServletRequest request, String path) {
		String realPath = request.getSession().getServletContext().getRealPath(path);
		File file = new File(realPath);
		double size = getFileFolderSize(file);
		double finalSize = size / 1024 / 1024;
		return finalSize;
	}

	public static long getFileFolderSize(File dir) {
		long size = 0;
		if (dir.isDirectory()) {
			for (File file : dir.listFiles()) {
				if (file.isFile()) {
					size += file.length();
				} else
					size += getFileFolderSize(file);
			}
		} else if (dir.isFile()) {
			size += dir.length();
		}
		return size;
	}

	public static String getFileExtension(File file) {
		String fileName = file.getName();
		if (fileName.lastIndexOf(".") != -1 && fileName.lastIndexOf(".") != 0)
			return fileName.substring(fileName.lastIndexOf(".") + 1);
		else
			return "";
	}

	public static void listAllFiles(String path, HttpServletRequest request) {
		String realPath = request.getSession().getServletContext().getRealPath(path);
		File folder = new File(realPath);
		File[] listOfFiles = folder.listFiles();

		if (listOfFiles != null) {
			if (listOfFiles.length > 0) {
				GlobalVariables.FOLDER_LIST = new ArrayList<>();
				GlobalVariables.FILE_LIST = new ArrayList<>();
				for (int i = 0; i < listOfFiles.length; i++) {
					if (listOfFiles[i].isFile()) {
						FilePropertyModel fileProperty = new FilePropertyModel();
						fileProperty.setName(listOfFiles[i].getName());
						fileProperty.setFileURL(path + "/" + listOfFiles[i].getName());
						fileProperty.setFileType(FileAction.getFileExtension(listOfFiles[i]));
						fileProperty.setFileSize(getFileSize(request, fileProperty.getFileURL()));
						String str = fileProperty.getFileURL();
						System.out.println("FILE SIZE::>"+fileProperty.getFileSize());
						int ind = str.lastIndexOf("/");
						if (ind >= 0) {
							String parentPath = str.substring(0, ind);
							int subInd = parentPath.lastIndexOf("/");
							parentPath = parentPath.substring(0, subInd);
							GlobalVariables.PARENT_PATH = parentPath;
							fileProperty.setParentURL(parentPath);
						}

						GlobalVariables.FILE_LIST.add(fileProperty);
					} else if (listOfFiles[i].isDirectory()) {
						FilePropertyModel folderProperty = new FilePropertyModel();
						folderProperty.setName(listOfFiles[i].getName());
						folderProperty.setFileURL(path + "/" + listOfFiles[i].getName());
						folderProperty.setFileSize(getFileSize(request, folderProperty.getFileURL()));
						System.out.println("FOLDER SIZE::>"+folderProperty.getFileSize());
						String str = folderProperty.getFileURL();
						int ind = str.lastIndexOf("/");
						if (ind >= 0) {
							String parentPath = str.substring(0, ind);
							int subInd = parentPath.lastIndexOf("/");
							parentPath = parentPath.substring(0, subInd);
							folderProperty.setParentURL(parentPath);
							GlobalVariables.PARENT_PATH = parentPath;
						}

						GlobalVariables.FOLDER_LIST.add(folderProperty);
						// listAllFiles(path+"/"+listOfFiles[i].getName(),
						// request);
					}
				}
			} else {

			}
		}
	}
	
}
