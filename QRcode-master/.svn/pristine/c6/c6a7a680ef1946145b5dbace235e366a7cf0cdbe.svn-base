package com.zs.cws.schooladmin.timetable.controller;

import java.io.IOException;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.apache.commons.io.FilenameUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

import com.zs.cws.schooladmin.kudos.dao.KudosDAO;
import com.zs.cws.schooladmin.kudos.repository.KudosRepository;
import com.zs.cws.schooladmin.subscriptionactivation.dao.SubscriptionActivationDAO;
import com.zs.cws.schooladmin.timetable.dao.TimeTableDAO;
import com.zs.cws.schooladmin.timetable.model.TimeTableModel;
import com.zs.cws.schooladmin.timetable.repository.TimeTableRepository;
import com.zs.cws.superadmin.school.model.SchoolModel;
import com.zs.cws.superadmin.schooldivision.dao.SchoolDivDAO;
import com.zs.cws.superadmin.schoolstaff.dao.SchoolStaffDAO;
import com.zs.cws.superadmin.student.dao.StudentDAO;
import com.zs.cws.utils.FileAction;
import com.zs.cws.utils.GlobalVariables;
import com.zs.cws.utils.UploadFiles;

@Controller
@Scope("session")
@RequestMapping("schooladmin/timetable")
public class TimeTableController {

	@Autowired
	KudosRepository kudosRepository;
	@Autowired
	TimeTableRepository timeTableRepository;
	@Autowired
	SubscriptionActivationDAO subscriptionActivationDAO;
	@Autowired
	KudosDAO kudosDAO;
	@Autowired
	StudentDAO studentDAO;
	int timeTableID;
	@Autowired
	TimeTableDAO timeTableDAO;
	@Autowired
	SchoolStaffDAO SchoolStaffDAO;
	@Autowired
	SchoolDivDAO schoolDivDAO;

	//String extension;
	
	@RequestMapping()
	public ModelAndView timeTableHome() {
		ModelAndView modelAndView = new ModelAndView("school_admin_school_timetable");
		modelAndView.addObject("staffCount", SchoolStaffDAO.getStaffCount(GlobalVariables.SCHOOL_ID));
		modelAndView.addObject("divisionCount", schoolDivDAO.getDivisionCount(GlobalVariables.SCHOOL_ID));
		modelAndView.addObject("studentCount", studentDAO.getStudentsCount(GlobalVariables.SCHOOL_ID));
		if (!subscriptionActivationDAO.isSubscribed(GlobalVariables.SCHOOL_ID)) {

			modelAndView = new ModelAndView("redirect:/redirect");
		}
		return modelAndView;
	}

	@RequestMapping(value = "/timetableList", method = RequestMethod.GET)
	public @ResponseBody Object listAllTimeTable() {
		List<TimeTableModel> timetableList = timeTableDAO.getTimeTableList(GlobalVariables.SCHOOL_ID);
		return timetableList;
	}

	@RequestMapping(value = { "/post" }, method = RequestMethod.POST, produces = { "application/json" })
	public @ResponseBody Object getJsonData(HttpServletRequest request, @RequestBody TimeTableModel timeTableModel,
			HttpSession session) {
		// if (timeTableModel.getTimeTableID() == 0) {
		System.out.println("INSIDE IDDD == 0");
		if (!timeTableDAO.isAvailable(timeTableModel)) {
			System.out.println("NOT AVAILABLE...........");
			String loggedUser = (String) session.getAttribute("loggedUser");
			SchoolModel schoolModel = new SchoolModel();
			schoolModel.setSchoolId(GlobalVariables.SCHOOL_ID);
			timeTableModel.setSchoolModel(schoolModel);
			timeTableModel.setCreatedDate(new Date());
			timeTableModel.setUpdatedDate(new Date());
			timeTableModel.setCreatedUser(loggedUser);
			timeTableModel.setUpdatedUser(loggedUser);
			timeTableRepository.save(timeTableModel);
			timeTableID = timeTableModel.getTimeTableID();
		} else {
			System.out.println("AVAILABLE......");
		}

		/*
		 * } else { timeTableID = timeTableModel.getTimeTableID(); }
		 */
		return timeTableRepository.findOne(timeTableID);
	}

	@RequestMapping(value = "/timetabledeleteItems/{id}", method = RequestMethod.GET)
	public @ResponseBody Object deleteItems(@PathVariable("id") int[] timetableIDS) {
		for (int timeID : timetableIDS) {
			if (timeID != 0) {
				System.out.println("newsiddddddddddd" + timeID);
				timeTableRepository.delete(timeID);
			}
		}
		return true;
	}

	@RequestMapping(value = "/deleteTimeTable/{id}", method = RequestMethod.GET)
	public @ResponseBody Object deleteItems(@PathVariable("id") int timeTableID, HttpServletRequest request) {
		TimeTableModel timeTableModel = new TimeTableModel();
		timeTableModel = timeTableRepository.findOne(timeTableID);
		String[] fileName = timeTableModel.getImageURL().split(FileAction.getURLBase(request));
		FileAction.deleteFile(request, fileName[1]);
		timeTableRepository.delete(timeTableID);
		return false;
	}

	@RequestMapping(value = "/insertImage", method = RequestMethod.POST)
	public @ResponseBody Object uploadTimeTable(@RequestParam(value = "file", required = false) MultipartFile file,
			HttpSession session, HttpServletRequest request) throws IOException {
		TimeTableModel timeTableModel = new TimeTableModel();

	
			if (file != null) {
				timeTableModel = timeTableRepository.findOne(timeTableID);
				if (timeTableModel.getImageURL() != null) {
					String[] fileName = timeTableModel.getImageURL().split(FileAction.getURLBase(request));
					FileAction.deleteFile(request, fileName[1]);
				}
				String directory = "/resources/img/"
						+ timeTableModel.getSchoolModel().getManagementModel().getManagementName() + "/"
						+ timeTableModel.getSchoolModel().getSchoolName() + "/timetable";

				timeTableModel.setImageURL(UploadFiles.uploadDocument(file, request, directory, ".pdf"));

				timeTableRepository.save(timeTableModel);
			} 
		
		return timeTableModel;
	}

	/*
	@RequestMapping(value = "/fileValidation", method = RequestMethod.POST, produces = { "application/json" })
	public @ResponseBody Object isRegisteredPhonse() {
		
		List<TimeTableModel> timetableList = timeTableDAO.getTimeTableList(GlobalVariables.SCHOOL_ID);
		return timetableList;
		//JOptionPane.showMessageDialog(null, extension);
		//return extension;
	}*/
}
