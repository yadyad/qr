package com.zs.cws.schooladmin.reports.controller;

import java.io.File;
import java.io.IOException;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.sql.DataSource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.mysql.jdbc.Connection;
import com.sun.org.apache.xerces.internal.impl.xpath.regex.ParseException;
import com.zs.cws.superadmin.schooldivision.dao.SchoolDivDAO;
import com.zs.cws.superadmin.schoolstaff.dao.SchoolStaffDAO;
import com.zs.cws.superadmin.student.dao.StudentDAO;
import com.zs.cws.superadmin.student.repository.StudentRepository;
import com.zs.cws.utils.GlobalVariables;
import com.zs.cws.ws.android.feespayment.model.FeesPaymentModel;

import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.JasperRunManager;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.engine.util.JRLoader;

@Controller
@Scope("session")
@RequestMapping("schooladmin/reports")
public class ReportsController {
	@Autowired
	SchoolDivDAO schoolDivDAO;
	@Autowired
	StudentDAO studentDAO;
	@Autowired
	DataSource dataSource;
	@Autowired
	StudentRepository studentRepository;
	@Autowired
	SchoolStaffDAO SchoolStaffDAO;

	String standard;
	String divi;
	String selectedDays;

	
	
	
	@RequestMapping()
	public ModelAndView reports() {
		ModelAndView modelAndView = new ModelAndView("school_admin_reports");
		modelAndView.addObject("featureList", GlobalVariables.SCHOOL_FEATURE_LIST);
		modelAndView.addObject("staffCount", SchoolStaffDAO.getStaffCount(GlobalVariables.SCHOOL_ID));
		modelAndView.addObject("divisionCount", schoolDivDAO.getDivisionCount(GlobalVariables.SCHOOL_ID));
		modelAndView.addObject("studentCount", studentDAO.getStudentsCount(GlobalVariables.SCHOOL_ID));
		return modelAndView;
	}

	@RequestMapping(value = "/studentListView", method = RequestMethod.GET)
	public @ResponseBody Object list() {
		List<FeesPaymentModel> feesReportModels = studentDAO.getFeesDetails(GlobalVariables.SCHOOL_ID);
		return feesReportModels;
	}

	@RequestMapping(value = "/studentListViewFilter/{standard}/{division}/{days}", method = RequestMethod.GET)
	public @ResponseBody Object listFilter(@PathVariable("standard") String std,
			@PathVariable("division") String divisions,@PathVariable("days") String days) {
		List<FeesPaymentModel> feesReportModels = studentDAO.getFeesDetailsFilter(GlobalVariables.SCHOOL_ID, std,
				divisions,days);
		standard = std;
		divi = divisions;
		selectedDays = days;
		return feesReportModels;

	}

	@RequestMapping("/studentList")
	public String report(HttpServletRequest request, HttpServletResponse response, FeesPaymentModel feesReportModel)
			throws ParseException, SQLException, JRException, IOException {

		Connection conn = null;
		String reportName = "report";

			conn = (Connection) dataSource.getConnection();

			if (conn != null) {
				System.out.println("Database Connected");
			} else {
				System.out.println(" connection Failed ");
			}

			List<FeesPaymentModel> feesReportModels = studentDAO.getFeesDetailsFilter(GlobalVariables.SCHOOL_ID,
					standard, divi,selectedDays);

			String rptFormat = "pdf";
			System.out.println("rpt format " + rptFormat);
			List<Map<String, Object>> reportMap = new ArrayList<Map<String, Object>>();
			for (FeesPaymentModel feesReportModel2 : feesReportModels) {

				Map<String, Object> hmParams = new HashMap<String, Object>();
				hmParams.put("enrollmentNumbers", feesReportModel2.getStudentModel().getEnrollmentNumber());
				hmParams.put("studentName", feesReportModel2.getStudentModel().getFirstName());
				hmParams.put("standard", feesReportModel2.getStudentModel().getSchoolDivModel().getStandard()+" "+ feesReportModel2.getStudentModel().getSchoolDivModel().getDivision());
				hmParams.put("amount", feesReportModel2.getAmount());
				SimpleDateFormat format = new SimpleDateFormat("MM/dd/yyyy");
				String result = format.format(feesReportModel2.getPayedDate());
				hmParams.put("payedDate",result);
				reportMap.add(hmParams);
				
			}
			
			JasperReport jasperReport = getCompiledFile(reportName, request);
			generateReportPDF(response,

					reportMap, jasperReport, conn);	

		return null;
	}
	
	private void generateReportPDF(HttpServletResponse response, List<Map<String, Object>> reportMap, JasperReport jasperReport,
			Connection conn) throws JRException, IOException {
		System.out.println("INSIDE GENERATE");
		JRBeanCollectionDataSource jRB1 = new JRBeanCollectionDataSource(reportMap);
		byte[] bytes = null;
		Map<String, Object> map = new HashMap<String, Object>();
		//bytes = JasperRunManager.runReportToPdf(jasperReport, reportMap, conn);
		bytes = JasperRunManager.runReportToPdf(jasperReport, map,jRB1);
		System.out.println("BYTESSSS" + bytes.toString());

		// response.reset();
		// response.resetBuffer();
		response.setContentType("application/pdf");
		response.setContentLength(bytes.length);
		ServletOutputStream ouputStream = response.getOutputStream();
		ouputStream.write(bytes, 0, bytes.length);
		ouputStream.flush();
		ouputStream.close();

	}

	private JasperReport getCompiledFile(String reportName, HttpServletRequest request) throws JRException {

		File reportFile = new File(request.getRealPath("/resources/reports/" + reportName + ".jasper"));
		// If compiled file is not found, then compile XML template
		if (!reportFile.exists()) {
			JasperCompileManager.compileReportToFile(request.getRealPath("/resources/reports/" + reportName + ".jrxml"),
					request.getRealPath("/resources/reports/" + reportName + ".jasper"));
		}
		JasperReport jasperReport = (JasperReport) JRLoader.loadObjectFromFile(reportFile.getPath());
		return jasperReport;
	}

	public static String getRealPath(HttpServletRequest request, String path) {

		return request.getSession().getServletContext().getRealPath(path);
	}

}
