package com.zs.cws.schooladmin.directory.controller;

import java.util.ArrayList;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.zs.cws.schooladmin.directory.model.DirectoryModel;
import com.zs.cws.superadmin.school.model.SchoolModel;
import com.zs.cws.superadmin.school.repository.SchoolRepository;
import com.zs.cws.superadmin.schooldivision.dao.SchoolDivDAO;
import com.zs.cws.superadmin.schoolstaff.dao.SchoolStaffDAO;
import com.zs.cws.superadmin.student.dao.StudentDAO;
import com.zs.cws.utils.FileAction;
import com.zs.cws.utils.FilePropertyModel;
import com.zs.cws.utils.GlobalVariables;

@Controller
@Scope("session")
@RequestMapping("schooladmin/directory")
public class DirectoryController {

	@Autowired
	SchoolRepository schoolRepository;
	@Autowired
	SchoolStaffDAO SchoolStaffDAO;
	@Autowired
	SchoolDivDAO schoolDivDAO;
	@Autowired
	StudentDAO studentDAO;

	@RequestMapping()
	public ModelAndView superAdminHome() {
		ModelAndView model = new ModelAndView("schooladmin_directory");
		model.addObject("staffCount", SchoolStaffDAO.getStaffCount(GlobalVariables.SCHOOL_ID));
		model.addObject("divisionCount", schoolDivDAO.getDivisionCount(GlobalVariables.SCHOOL_ID));
		model.addObject("studentCount", studentDAO.getStudentsCount(GlobalVariables.SCHOOL_ID));

		return model;
	}

	@RequestMapping(value = "/alldirectory", method = RequestMethod.GET)
	public @ResponseBody Object listAllfiles(HttpServletRequest request) {
		GlobalVariables.FILE_LIST = new ArrayList<>();
		GlobalVariables.FOLDER_LIST = new ArrayList<>();
		SchoolModel schoolModel = schoolRepository.findOne(GlobalVariables.SCHOOL_ID);
		String path = "resources/img/" + schoolModel.getManagementModel().getManagementName() + "/"
				+ schoolModel.getSchoolName();
		GlobalVariables.PARENT_PATH = "resources/img/" + schoolModel.getManagementModel().getManagementName();
		GlobalVariables.BASE_PATH = "resources/img/" + schoolModel.getManagementModel().getManagementName()+"/"+schoolModel.getSchoolName();
		System.out.println("SIZE::>" + FileAction.getFileSize(request, path));
		FileAction.listAllFiles(path, request);
		DirectoryModel directoryModel = new DirectoryModel();
		directoryModel.setFileList(GlobalVariables.FILE_LIST);
		directoryModel.setFolderList(GlobalVariables.FOLDER_LIST);
		System.out.println("DIRECTORY MODEL:::>>" + directoryModel.toString());
		return directoryModel;
	}

	// @RequestMapping(value = "/subdirectory", method = RequestMethod.GET)
	@RequestMapping(value = { "/subdirectory" }, method = RequestMethod.POST, produces = { "application/json" })
	public @ResponseBody Object listAllfiles1(HttpServletRequest request,
			@RequestBody FilePropertyModel filePropertyModel, HttpSession session) {

		System.out.println("Subdirectory Calledddd.");
		GlobalVariables.FILE_LIST = new ArrayList<>();
		GlobalVariables.FOLDER_LIST = new ArrayList<>();

		FileAction.listAllFiles(filePropertyModel.getFileURL(), request);
		DirectoryModel directoryModel = new DirectoryModel();
		directoryModel.setFileList(GlobalVariables.FILE_LIST);
		directoryModel.setFolderList(GlobalVariables.FOLDER_LIST);
		System.out.println("SUB DIRECTORY::>>>" + directoryModel.toString());
		return directoryModel;
	}

	@RequestMapping(value = { "/deleteFile" }, method = RequestMethod.POST, produces = { "application/json" })
	public @ResponseBody Object deleteFiles(HttpServletRequest request,
			@RequestBody FilePropertyModel filePropertyModel, HttpSession session) {
		System.out.println("MODELLL FOr DELE::>"+filePropertyModel.toString());
		FileAction.deleteFile(request, filePropertyModel.getFileURL());
		GlobalVariables.FILE_LIST = new ArrayList<>();
		GlobalVariables.FOLDER_LIST = new ArrayList<>();

		FileAction.listAllFiles(filePropertyModel.getParentURL(), request);
		DirectoryModel directoryModel = new DirectoryModel();
		directoryModel.setFileList(GlobalVariables.FILE_LIST);
		directoryModel.setFolderList(GlobalVariables.FOLDER_LIST);
		return directoryModel;
	}

	@RequestMapping(value = { "/backdirectory" }, method = RequestMethod.GET)
	public @ResponseBody Object listAllfilesBAck(HttpServletRequest request, HttpSession session) {
		if (GlobalVariables.PARENT_PATH.length() < GlobalVariables.BASE_PATH.length()) {
			GlobalVariables.PARENT_PATH = GlobalVariables.BASE_PATH;
		}
		FileAction.listAllFiles(GlobalVariables.PARENT_PATH, request);
		DirectoryModel directoryModel = new DirectoryModel();
		directoryModel.setFileList(GlobalVariables.FILE_LIST);
		directoryModel.setFolderList(GlobalVariables.FOLDER_LIST);
		
		System.out.println("PPPP:::>>>" + directoryModel.toString());
		return directoryModel;
	}
}
