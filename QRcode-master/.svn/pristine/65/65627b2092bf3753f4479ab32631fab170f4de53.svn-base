package com.zs.cws.superadmin.master.suscription.controller;

import java.io.IOException;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.zs.cws.superadmin.master.suscription.dao.SubscriptionPlanDAO;
import com.zs.cws.superadmin.master.suscription.model.SubsciptionPlanModel;
import com.zs.cws.superadmin.master.suscription.repository.SubscriptionPlanRepository;

@Controller
@Scope("session")
@RequestMapping("superadmin/subscription")
public class SubscriptionController {
	@Autowired
	SubscriptionPlanDAO subscriptionPlanDAO;
	@Autowired
	SubscriptionPlanRepository subscriptionPlanRepository;

	@RequestMapping()
	public ModelAndView view() {
		ModelAndView modelAndView = new ModelAndView("super_admin_subscription");
		modelAndView.addObject("subscription", "active");
		return modelAndView;
	}

	@RequestMapping(value = "/all", method = RequestMethod.GET)
	public @ResponseBody Object listAllUsers(HttpServletRequest request, HttpSession session) throws IOException {
		List<SubsciptionPlanModel> subsciptionPlanModelList = subscriptionPlanRepository.findAll();
		return subsciptionPlanModelList;
	}

	@RequestMapping(value = { "/post" }, method = RequestMethod.POST, produces = { "application/json" })
	public @ResponseBody Object getJsonData(HttpServletRequest request,
			@RequestBody SubsciptionPlanModel subsciptionPlanModel, HttpSession session) {
		if (!subscriptionPlanDAO.isAvailable(subsciptionPlanModel)) {
			subscriptionPlanRepository.save(subsciptionPlanModel);
			return subsciptionPlanModel;
		} else {
			System.out.println("DUplicate");
			return null;
		}
	}

	@RequestMapping(value = "/delete/{id}", method = RequestMethod.GET)
	public @ResponseBody Object deleteItems(@PathVariable("id") int planID) {
		if (planID != 0) {
			subscriptionPlanRepository.delete(planID);
			return true;
		}
		return false;
	}
	
	
	
	@RequestMapping(value = "/subscriptiondeleteItems/{id}", method = RequestMethod.GET)
	public @ResponseBody Object deleteItems(@PathVariable("id") int[] subsIDs) {
		for (int subID : subsIDs) {
			if (subID != 0) {
				subscriptionPlanRepository.delete(subID);
			}
		}
		return true;
	}

	@RequestMapping(value = "/select/{id}", method = RequestMethod.GET)
	public @ResponseBody Object selectitem(@PathVariable("id") int planID) {
		SubsciptionPlanModel SubsciptionPlanModel = subscriptionPlanRepository.findOne(planID);

		return SubsciptionPlanModel;
	}
}
