package com.zs.cws.superadmin.master.feature.controller;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;
import com.zs.cws.superadmin.master.feature.dao.FeatureDAO;
import com.zs.cws.superadmin.master.feature.model.FeatureModel;
import com.zs.cws.superadmin.master.feature.repository.FeatureRepository;

@Controller
@Scope("session")
@RequestMapping("superadmin/feature")
public class FeatureController {

	@Autowired
	FeatureDAO FeatureDAO;
	@Autowired
	FeatureRepository FeatureRepository;

	@RequestMapping()
	public ModelAndView view() {
		ModelAndView modelAndView = new ModelAndView("super_admin_feature");
		modelAndView.addObject("feature", "active");
		return modelAndView;
	}

	@RequestMapping(value = "/featureall", method = RequestMethod.GET)
	public @ResponseBody Object listAllUsers() {
		List<FeatureModel> featureModels = FeatureRepository.findAll();
		return featureModels;
	}

	@RequestMapping(value = { "/post" }, method = RequestMethod.POST, produces = { "application/json" })
	public @ResponseBody Object getJsonData(HttpServletRequest request, @RequestBody FeatureModel featureModel,
			HttpSession session) {

		String loggedUser = (String) session.getAttribute("loggedUser");

		if (!FeatureDAO.isAvailable(featureModel)) {
			featureModel.setCreatedUser(loggedUser);
			featureModel.setUpdatedUser(loggedUser);
			featureModel.setCreatedDate(new Date());
			featureModel.setUpdatedDate(new Date());
			FeatureRepository.save(featureModel);
			return featureModel;
		} else {
			System.out.println("DUplicate");
			return null;
		}
	}

	@RequestMapping(value = "/featuredeleteItems/{id}", method = RequestMethod.GET)
	public @ResponseBody Object deleteItems(@PathVariable("id") int[] featureIDs) {
		for (int featureId : featureIDs) {
			if (featureId != 0) {
				FeatureRepository.delete(featureId);
			}
		}
		return true;
	}

	@RequestMapping(value = "/featuredeleteSingleItem/{id}", method = RequestMethod.GET)
	public @ResponseBody Object deleteItems(@PathVariable("id") int featureId) {
		if (featureId != 0) {
			FeatureRepository.delete(featureId);
			return true;
		}
		return false;
	}

	@RequestMapping(value = "/dropDownFeatureType", method = RequestMethod.GET)
	public @ResponseBody Object featureType() {
		HashMap<String, String> featureTypesMap = new HashMap<>();
			featureTypesMap.put("Teacher", "Teacher");
			featureTypesMap.put("Parent", "Parent");
			featureTypesMap.put("Principal", "Principal");
			featureTypesMap.put("Web", "Web");
			
		return featureTypesMap;
	}

}
