package com.zs.cws.superadmin.master.managementposition.controller;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import javax.swing.JOptionPane;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.zs.cws.superadmin.master.department.model.DepartmentModel;
import com.zs.cws.superadmin.master.managementposition.dao.ManagementPositionDAO;
import com.zs.cws.superadmin.master.managementposition.model.ManagementPositionModel;
import com.zs.cws.superadmin.master.managementposition.repository.ManagementPositionRepository;

@Controller
@Scope("session")
@RequestMapping("superadmin/managementposition")
public class ManagementPositionController {
	
	@Autowired
	ManagementPositionRepository managementPositionRepository;

	
	@Autowired
	ManagementPositionDAO managementPositionDAO;
	
	
	@RequestMapping()
	public ModelAndView view() {
		ModelAndView modelAndView = new ModelAndView("super_admin_managementPostion");
		modelAndView.addObject("managementpostion", "active");
		return modelAndView;
	}
	
	
	@RequestMapping(value = "/all", method = RequestMethod.GET)
	public @ResponseBody Object listAllUsers() {
		List<ManagementPositionModel> managementPosList = managementPositionRepository.findAll();
		return managementPosList;
	}

	@RequestMapping(value = { "/post" }, method = RequestMethod.POST, produces = { "application/json" })
	public @ResponseBody Object getJsonData(HttpServletRequest request, @RequestBody ManagementPositionModel managementPositionModel,
			HttpSession session) {

		String loggedUser = (String) session.getAttribute("loggedUser");
		if (!managementPositionDAO.isAvailable(managementPositionModel)) {
			managementPositionModel.setCreatedUser(loggedUser);
			managementPositionModel.setUpdatedUser(loggedUser);
			managementPositionModel.setCreatedDate(new Date());
			managementPositionModel.setUpdatedDate(new Date());
			managementPositionRepository.save(managementPositionModel);
			return managementPositionModel;
		} else {
			System.out.println("DUplicate");
			return null;
		}
	}

	@RequestMapping(value = "/deleteItems/{id}", method = RequestMethod.GET)
	public @ResponseBody Object deleteItems(@PathVariable("id") int[] mgmtIDs) {
		for (int managemenId : mgmtIDs) {
			if (managemenId != 0) {
				managementPositionRepository.delete(managemenId);
			}
		}
		return true;
	}

	@RequestMapping(value = "/deleteSingleItem/{id}", method = RequestMethod.GET)
	public @ResponseBody Object deleteItems(@PathVariable("id") int mgmtId) {
		if (mgmtId != 0) {
			managementPositionRepository.delete(mgmtId);
			return true;
		}
		return false;
	}
	
	@RequestMapping(value = "/dropDown", method = RequestMethod.GET)
	public @ResponseBody Object managementMap() {
		List<ManagementPositionModel> managementPositionList = managementPositionRepository.findAll();
		Map<Integer, String> managPositionMap = new HashMap<>();
		for (ManagementPositionModel managementPositionModel : managementPositionList) {
			managPositionMap.put(managementPositionModel.getPositionID(), managementPositionModel.getPosition());
		}
		return managPositionMap;
	}

}
