package com.zs.cws.schooladmin.settings.controller;

import java.io.File;
import java.io.IOException;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

import com.zs.cws.schooladmin.settings.dao.AcademicYearDAO;
import com.zs.cws.schooladmin.settings.model.AcademicModel;
import com.zs.cws.schooladmin.settings.model.FeeStructureViewModel;
import com.zs.cws.schooladmin.settings.model.FeesStructureModel;
import com.zs.cws.schooladmin.settings.repository.AcademicYearRepository;
import com.zs.cws.schooladmin.settings.repository.FeesStructureRepository;
import com.zs.cws.superadmin.school.model.SchoolModel;
import com.zs.cws.superadmin.school.repository.SchoolRepository;
import com.zs.cws.superadmin.schooldivision.dao.SchoolDivDAO;
import com.zs.cws.superadmin.schoolstaff.dao.SchoolStaffDAO;
import com.zs.cws.superadmin.student.dao.StudentDAO;
import com.zs.cws.utils.FileAction;
import com.zs.cws.utils.GlobalVariables;
import com.zs.cws.utils.UploadFiles;

@Controller
@Scope("session")
@RequestMapping("schooladmin/settings")
public class AcademicYearController {

	@Autowired
	AcademicYearRepository academicYearRepository;
	@Autowired
	SchoolStaffDAO SchoolStaffDAO;
	@Autowired
	SchoolDivDAO schoolDivDAO;
	@Autowired
	StudentDAO studentDAO;
	@Autowired
	SchoolRepository schoolRepository;
	@Autowired
	FeesStructureRepository feesStructureRepository;
	@Autowired
	AcademicYearDAO academicYearDAO;

	@RequestMapping()
	public ModelAndView view() {
		ModelAndView modelAndView = new ModelAndView("school_admin_settings");
		modelAndView.addObject("featureList", GlobalVariables.SCHOOL_FEATURE_LIST);
		modelAndView.addObject("staffCount", SchoolStaffDAO.getStaffCount(GlobalVariables.SCHOOL_ID));
		modelAndView.addObject("divisionCount", schoolDivDAO.getDivisionCount(GlobalVariables.SCHOOL_ID));
		modelAndView.addObject("studentCount", studentDAO.getStudentsCount(GlobalVariables.SCHOOL_ID));
		return modelAndView;

	}

	@RequestMapping(value = "/all", method = RequestMethod.GET)
	public @ResponseBody Object listAllPlans() {

		List<AcademicModel> academicModels = academicYearDAO.findAcademicDetails(GlobalVariables.SCHOOL_ID);
		return academicModels.get(0);
	}

	@RequestMapping(value = { "/post" }, method = RequestMethod.POST, produces = { "application/json" })
	public @ResponseBody Object getJsonData(HttpServletRequest request, @RequestBody AcademicModel academicModel,
			HttpSession session) {
		String loggedUser = (String) session.getAttribute("loggedUser");
		SchoolModel schoolModel = schoolRepository.findOne(GlobalVariables.SCHOOL_ID);
		academicModel.setSchoolModel(schoolModel);
		academicModel.setCreatedBy(loggedUser);
		academicModel.setUpdatedBy(loggedUser);
		academicModel.setCreatedDate(new Date());
		academicModel.setUpdatedDate(new Date());
		academicYearRepository.save(academicModel);
		return academicModel;

	}

	@RequestMapping(value = "/allfees", method = RequestMethod.GET)
	public @ResponseBody Object listAllFees(HttpServletRequest request) {
		List<FeesStructureModel> feesStructureModels = academicYearDAO.getFees(GlobalVariables.SCHOOL_ID);
		if (feesStructureModels.size() > 0) {
			String[] originalPath = feesStructureModels.get(0).getFeesStructure()
					.split(FileAction.getURLBase(request));
			File file = new File(originalPath[1]);
			System.out.println("FILE Nameeeeeeeeeeeeeee" + file);

			FeeStructureViewModel feeStructureViewModel = new FeeStructureViewModel();
			feeStructureViewModel.setFileName(file.getName());
			feeStructureViewModel.setPathName(feesStructureModels.get(0).getFeesStructure());
			return feeStructureViewModel;
		}
		return null;
	}

	@RequestMapping(value = "/insertfeesStructure", method = RequestMethod.POST)
	public @ResponseBody Object uploadFees(@RequestParam(value = "file", required = false) MultipartFile file,
			HttpSession session, HttpServletRequest request) throws IOException {

		if (academicYearDAO.isAvaliableFees(GlobalVariables.SCHOOL_ID)) {
			System.out.println("INSIDE IF");
			List<FeesStructureModel> feesStructureModels = academicYearDAO.getFees(GlobalVariables.SCHOOL_ID);
			FeesStructureModel feesStructureModel = feesStructureRepository
					.findOne(feesStructureModels.get(0).getFeesStructureID());
			System.out.println("FEEEEDDDDSSS>>>>>"+feesStructureModel.toString());
			if (file != null) {
				SchoolModel schoolModel = schoolRepository.findOne(GlobalVariables.SCHOOL_ID);

				String directory = "/resources/img/" + schoolModel.getManagementModel().getManagementName() + "/"
						+ schoolModel.getSchoolName() + "/feesstructure";
				feesStructureModel.setFeesStructure(UploadFiles.uploadDocument(file, request, directory, ".pdf"));
				feesStructureModel.setCreatedDate(new Date());
				feesStructureModel.setSchoolModel(schoolModel);
				feesStructureRepository.save(feesStructureModel);
			}
			return feesStructureModel;
		} else {
			FeesStructureModel feesStructureModel =new FeesStructureModel();
			if (file != null) {
				SchoolModel schoolModel = schoolRepository.findOne(GlobalVariables.SCHOOL_ID);

				String directory = "/resources/img/" + schoolModel.getManagementModel().getManagementName() + "/"
						+ schoolModel.getSchoolName() + "/feesstructure";
				feesStructureModel.setFeesStructure(UploadFiles.uploadDocument(file, request, directory, ".pdf"));
				feesStructureModel.setCreatedDate(new Date());
				feesStructureModel.setSchoolModel(schoolModel);
				feesStructureRepository.save(feesStructureModel);
			}
			return null;
		}
	}
}
