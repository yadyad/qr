package com.zs.cws.schooladmin.driverdetails.controller;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.zs.cws.schooladmin.driverdetails.dao.DriverDetailsDAO;
import com.zs.cws.schooladmin.driverdetails.model.DriverDetailsModel;
import com.zs.cws.schooladmin.driverdetails.repository.DriverDetailsRepository;
import com.zs.cws.schooladmin.driverroutes.dao.DriverRouteDAO;
import com.zs.cws.schooladmin.driverroutes.model.DriverRoutesModel;
import com.zs.cws.schooladmin.driverroutes.repository.DriverRouteRepository;
import com.zs.cws.superadmin.school.model.SchoolModel;
import com.zs.cws.superadmin.school.repository.SchoolRepository;
import com.zs.cws.superadmin.schooldivision.dao.SchoolDivDAO;
import com.zs.cws.superadmin.schoolstaff.dao.SchoolStaffDAO;
import com.zs.cws.superadmin.student.dao.StudentDAO;
import com.zs.cws.utils.GlobalVariables;

@Controller
@RequestMapping("schooladmin/driverdetails")
public class DriverDetailsController {

	@Autowired
	StudentDAO studentDAO;
	@Autowired
	SchoolRepository schoolRepository;
	@Autowired
	SchoolStaffDAO SchoolStaffDAO;
	@Autowired
	SchoolDivDAO schoolDivDAO;

	@Autowired
	DriverRouteDAO driverRouteDAO;

	@Autowired
	DriverDetailsRepository driverDetailsRepository;

	@Autowired
	DriverDetailsDAO driverDetailsDAO;
	@Autowired
	DriverRouteRepository driverRouteRepository;

	@RequestMapping()
	public ModelAndView KudosHome() {
		ModelAndView modelAndView = new ModelAndView("driver-details");
		modelAndView.addObject("staffCount", SchoolStaffDAO.getStaffCount(GlobalVariables.SCHOOL_ID));
		modelAndView.addObject("divisionCount", schoolDivDAO.getDivisionCount(GlobalVariables.SCHOOL_ID));
		modelAndView.addObject("studentCount", studentDAO.getStudentsCount(GlobalVariables.SCHOOL_ID));
		return modelAndView;
	}

	@RequestMapping(value = "/all", method = RequestMethod.GET)
	public @ResponseBody Object listAllUsers() {
		List<DriverDetailsModel> driverDetailsModels = driverDetailsDAO.getDriverDetails(GlobalVariables.SCHOOL_ID);
		return driverDetailsModels;
	}

	@RequestMapping(value = { "/post" }, method = RequestMethod.POST, produces = { "application/json" })
	public @ResponseBody Object getJsonData(HttpServletRequest request,
			@RequestBody DriverDetailsModel driverDetailsModel, HttpSession session) {

		String loggedUser = (String) session.getAttribute("loggedUser");
		if (!driverDetailsDAO.isAvailable(driverDetailsModel)) {
			driverDetailsModel.setCreatedUser(loggedUser);
			driverDetailsModel.setCreatedDate(new Date());
			SchoolModel schoolModel = schoolRepository.findOne(GlobalVariables.SCHOOL_ID);
			driverDetailsModel.setSchoolModel(schoolModel);
			DriverRoutesModel driverRoutesModel = driverRouteRepository
					.findOne(driverDetailsModel.getDriverRoutesModel().getDriverRouteID());
			driverDetailsModel.setDriverRoutesModel(driverRoutesModel);
			driverDetailsRepository.save(driverDetailsModel);
			return driverDetailsModel;

		} else {
			return null;
		}
	}

	@RequestMapping(value = "/driverdetailsdeleteItems/{id}", method = RequestMethod.GET)
	public @ResponseBody Object deleteItems(@PathVariable("id") int[] driverIDs) {
		for (int driverID : driverIDs) {
			if (driverID != 0) {
				driverDetailsRepository.delete(driverID);
			}
		}
		return true;
	}

	@RequestMapping(value = "/dropDownRoute", method = RequestMethod.GET)
	public @ResponseBody Object divMap() {

		List<DriverRoutesModel> driverRoutesModels = driverRouteDAO.getRouteDetails(GlobalVariables.SCHOOL_ID);

		Map<Integer, String> routeMap = new HashMap<>();
		for (DriverRoutesModel driverRoutesModel : driverRoutesModels) {
			routeMap.put(driverRoutesModel.getDriverRouteID(),
					driverRoutesModel.getRouteFrom() + " - " + driverRoutesModel.getRouteTo());

		}
		return routeMap;
	}
}
