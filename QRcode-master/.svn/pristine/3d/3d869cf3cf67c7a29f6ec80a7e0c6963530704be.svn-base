package com.zs.cws.schooladmin.meeting.controller;

import java.security.Principal;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.zs.cws.login.LoginModel;
import com.zs.cws.schooladmin.meeting.dao.MeetingDAO;
import com.zs.cws.schooladmin.meeting.model.MeetingRequestModel;
import com.zs.cws.schooladmin.meeting.model.MeetingStatusModel;
import com.zs.cws.schooladmin.meeting.repository.MeetingRequestRepository;
import com.zs.cws.schooladmin.meeting.repository.MeetingStatusRepository;
import com.zs.cws.superadmin.schooldivision.dao.SchoolDivDAO;
import com.zs.cws.superadmin.schooldivision.model.SchoolDivModel;
import com.zs.cws.superadmin.schoolstaff.dao.SchoolStaffDAO;
import com.zs.cws.superadmin.schoolstaff.model.SchoolStaffModel;
import com.zs.cws.superadmin.student.dao.StudentDAO;
import com.zs.cws.superadmin.student.model.StudentModel;
import com.zs.cws.utils.GlobalVariables;

@Controller
@RequestMapping("schooladmin/meeting")
public class MeetingRequestController {
	@Autowired
	SchoolStaffDAO schoolStaffDAO;
	@Autowired
	MeetingDAO meetingDAO;
	@Autowired
	MeetingStatusRepository meetingStatusRepository;

	@Autowired
	StudentDAO studentDAO;
	@Autowired
	SchoolDivDAO schoolDivDAO;

	static int[] SELECTED_DIVISIONS;

	@Autowired
	MeetingRequestRepository meetingRequestRepository;

	@RequestMapping()
	public ModelAndView KudosHome() {
		ModelAndView modelAndView = new ModelAndView("school_admin_meeting");
		modelAndView.addObject("staffCount", schoolStaffDAO.getStaffCount(GlobalVariables.SCHOOL_ID));
		modelAndView.addObject("divisionCount", schoolDivDAO.getDivisionCount(GlobalVariables.SCHOOL_ID));
		modelAndView.addObject("studentCount", studentDAO.getStudentsCount(GlobalVariables.SCHOOL_ID));
		return modelAndView;
	}

	@RequestMapping(value = "/staffList", method = RequestMethod.GET)
	public @ResponseBody Object listAllSchoolStaff() {
		
		List<SchoolStaffModel> staffList = schoolStaffDAO.getStaffBySchoolForMyClass(GlobalVariables.SCHOOL_ID);
		return staffList;
	}

	@RequestMapping(value = "/meetingList", method = RequestMethod.GET)
	public @ResponseBody Object listAllMeetings() {
		List<MeetingRequestModel> meetingList = meetingDAO.getAllMeetings(GlobalVariables.SCHOOL_ID);
		return meetingList;
	}

	@RequestMapping(value = "/meetingTypes", method = RequestMethod.GET)
	public @ResponseBody Object listMeetingTypes() {
		Map<String, String> meetingMap = new HashMap<>();
		meetingMap.put("I", "Information");
		meetingMap.put("C", "Conformation");
		meetingMap.put("M", "Meeting");
		return meetingMap;
	}

	@RequestMapping(value = { "/post" }, method = RequestMethod.POST, produces = { "application/json" })
	public @ResponseBody Object getJsonData(HttpServletRequest request, @RequestBody MeetingRequestModel meetingModel,
			HttpSession session, Principal principal) {
		LoginModel loginModel = (LoginModel) session.getAttribute("loginModel");
		meetingModel.setSchoolStaffModel(loginModel.getSchoolStaffModel());
		meetingModel.setSchoolModel(meetingModel.getSchoolStaffModel().getSchoolModel());
		meetingRequestRepository.save(meetingModel);
		if (meetingModel.getMeetingRequestID() != 0) {
			for (int divisonID : SELECTED_DIVISIONS) {
				SchoolDivModel schoolDivModel = new SchoolDivModel();
				schoolDivModel.setSchoolDivId(divisonID);
				MeetingStatusModel meetingStatusModel = new MeetingStatusModel();
				meetingStatusModel.setMeetingRequestModel(meetingModel);
				meetingStatusModel.setStatus(0);
				meetingStatusModel.setSchoolDivModel(schoolDivModel);
				meetingStatusModel.setMeetingType(meetingModel.getMeetingType());

				List<StudentModel> studentList = studentDAO.listStudentsByDivison(
						meetingModel.getSchoolStaffModel().getSchoolModel().getSchoolId(), divisonID,"");
				for (StudentModel studentModel : studentList) {
					meetingStatusModel.setStudentModel(studentModel);
					meetingStatusRepository.save(meetingStatusModel);
				}
			}
		}
		return meetingModel;
	}
	
	
	
/*	
	@RequestMapping(value = "/alreadyMeeting/{meetingDate}/{meetingTime}/{staffs}", method = RequestMethod.GET)
	public @ResponseBody Object isMeetingAvalilable(@PathVariable("meetingDate") String meetingDate,@PathVariable("meetingTime") String meetingTime,@PathVariable("staffs") String staffs) {
	System.out.println("INSIDE EMEMMEME CHECKKKK");
		return meetingDAO.isMeetingAvail(meetingDate,meetingTime,staffs);
	}
	*/
	

	@RequestMapping(value = { "/postHybrid" }, method = RequestMethod.POST, produces = { "application/json" })
	public @ResponseBody Object getJsonData1(HttpServletRequest request, @RequestBody MeetingRequestModel meetingModel,
			HttpSession session, Principal principal) {
		meetingRequestRepository.save(meetingModel);
		if (meetingModel.getMeetingRequestID() != 0) {
			for (int divisonID : SELECTED_DIVISIONS) {
				SchoolDivModel schoolDivModel = new SchoolDivModel();
				schoolDivModel.setSchoolDivId(divisonID);
				MeetingStatusModel meetingStatusModel = new MeetingStatusModel();
				meetingStatusModel.setMeetingRequestModel(meetingModel);
				meetingStatusModel.setStatus(0);
				meetingStatusModel.setSchoolDivModel(schoolDivModel);
				meetingStatusModel.setMeetingType(meetingModel.getMeetingType());

				List<StudentModel> studentList = studentDAO.listStudentsByDivison(
						meetingModel.getSchoolStaffModel().getSchoolModel().getSchoolId(), divisonID,"");
				for (StudentModel studentModel : studentList) {
					meetingStatusModel.setStudentModel(studentModel);
					meetingStatusRepository.save(meetingStatusModel);
				}
			}
		}
		return meetingModel;
	}
	
	@RequestMapping(value = "/selectedDivisions/{id}", method = RequestMethod.GET)
	public @ResponseBody Object deleteItems(@PathVariable("id") int[] divisons) {
		SELECTED_DIVISIONS = divisons;
		return true;
	}

	@RequestMapping(value = "/deleteSelectedMeetings/{id}", method = RequestMethod.GET)
	public @ResponseBody Object deleteSelectedMeetings(@PathVariable("id") int[] meetingIdies) {
		for (int meetingID : meetingIdies) {
			meetingRequestRepository.delete(meetingID);
		}
		return true;
	}

}
