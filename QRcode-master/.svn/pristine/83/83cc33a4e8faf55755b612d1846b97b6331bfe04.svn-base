package com.zs.cws.ws.hybrid.license.controller;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import com.zs.cws.superadmin.management.model.ManagementModel;
import com.zs.cws.superadmin.management.repository.ManagementRepository;
import com.zs.cws.superadmin.managementmembers.dao.ManagementMemberDAO;
import com.zs.cws.superadmin.school.dao.SchoolDAO;
import com.zs.cws.superadmin.school.model.SchoolModel;
import com.zs.cws.superadmin.school.repository.SchoolRepository;
import com.zs.cws.superadmin.schoolfeature.dao.SchoolFeatureDAO;
import com.zs.cws.superadmin.schoolfeature.model.SchoolFeatureModel;
import com.zs.cws.superadmin.schoolstaff.dao.SchoolStaffDAO;
import com.zs.cws.superadmin.schoolstaff.model.SchoolStaffModel;
import com.zs.cws.superadmin.schoolstaff.repository.SchoolStaffRepository;
import com.zs.cws.ws.hybrid.license.model.FinalResultPOJO;
import com.zs.cws.ws.hybrid.license.model.LicenseRequestPOJO;
import com.zs.cws.ws.hybrid.license.model.ManagementLicenseResponsePOJO;
import com.zs.cws.ws.hybrid.license.model.SchoolResponsePOJO;

@RestController
public class LicenceController {

	@Autowired
	ManagementMemberDAO managementMemberDAO;
	@Autowired
	ManagementRepository managementRepository;
	@Autowired
	SchoolDAO schoolDAO;
	@Autowired
	SchoolFeatureDAO schoolFeatureDAO;
	@Autowired
	SchoolRepository schoolRepository;
	@Autowired
	SchoolStaffDAO schoolStaffDAO;
	
	@Autowired
	SchoolStaffRepository schoolStaffRepo;

	@RequestMapping(value = "/license", produces = { "application/json" }, method = RequestMethod.POST)
	public @ResponseBody Object listAll(HttpServletRequest request,
			@RequestBody LicenseRequestPOJO licenseRequestPOJO) {
		
		
		
		System.out.println("LICENSEEEEEE::::>"+licenseRequestPOJO.toString());
		try {
			FinalResultPOJO finalResultPOJO = new FinalResultPOJO();

			boolean checkPhoneNumberManagement = managementMemberDAO
					.phoneNumberExist(licenseRequestPOJO.getPhoneNumber());

			boolean checkPhoneNumberStaff = managementMemberDAO
					.phoneNumbrExistStaff(licenseRequestPOJO.getPhoneNumber());

			if (checkPhoneNumberManagement == true) {
				finalResultPOJO = managementMemberDAO.getMgmtDetails(licenseRequestPOJO.getPhoneNumber());

				finalResultPOJO.setStatus("Success");
				finalResultPOJO.setMemberType("Management");
				return finalResultPOJO;
			}

			else if (checkPhoneNumberStaff == true) {
				System.out.println("PRINCIPAL;;;;;");
				int staffID = schoolStaffDAO.getStaffID(licenseRequestPOJO.getPhoneNumber());
				SchoolStaffModel schoolStaffModel = schoolStaffRepo.findOne(staffID);
				schoolStaffModel.setFcmTocken(licenseRequestPOJO.getFcmTocken());
				schoolStaffRepo.save(schoolStaffModel);
				int schoolID = managementMemberDAO.getSchoolID(licenseRequestPOJO.getPhoneNumber());
				SchoolModel schoolModel = schoolRepository.findOne(schoolID);
				ManagementModel managementModel = managementRepository
						.findOne(schoolModel.getManagementModel().getManagementID());
				List<SchoolModel> schoolModels = new ArrayList<>();
				List<SchoolResponsePOJO> schoolResponsePOJOs = new ArrayList<>();
				List<String> stringFeatureList;
				List<ManagementLicenseResponsePOJO> managementLicenseResponsePOJO = new ArrayList<>();
				ManagementLicenseResponsePOJO managementLicenseResponsePOJOs = new ManagementLicenseResponsePOJO();
				schoolModels.add(schoolModel);
				managementLicenseResponsePOJOs.setManagementId(managementModel.getManagementID());
				managementLicenseResponsePOJOs.setManagementName(managementModel.getManagementName());
				managementLicenseResponsePOJOs.setManagementHead(managementModel.getManagementHead());
				managementLicenseResponsePOJOs.setEmail(managementModel.getEmailID());
				managementLicenseResponsePOJOs.setPhone(managementModel.getPhone());
				managementLicenseResponsePOJOs.setMemberID(staffID);
				managementLicenseResponsePOJO.add(managementLicenseResponsePOJOs);

				finalResultPOJO.setManagements(managementLicenseResponsePOJO);

				for (SchoolModel schoolModel1 : schoolModels) {
					SchoolResponsePOJO responsePOJO = new SchoolResponsePOJO();
					stringFeatureList = new ArrayList<>();
					responsePOJO.setRow_id(schoolModel1.getSchoolId());
					responsePOJO.setSchoolName(schoolModel1.getSchoolName());
					responsePOJO.setDescription(schoolModel1.getDescription());
					responsePOJO.setLogo(schoolModel1.getSchoolLogo());
					responsePOJO.setPrincipal(schoolDAO.getPrincipal(schoolModel1.getSchoolId(), "Principal"));
					List<SchoolFeatureModel> featureList = schoolFeatureDAO
							.getSchoolFeatureListForPrincipal(responsePOJO.getRow_id(), "Principal");

					for (SchoolFeatureModel schoolFeatureModel : featureList) {

						stringFeatureList.add(schoolFeatureModel.getFeatureModel().getFeatureName());
					}

					responsePOJO.setFeatureResponse(stringFeatureList.toArray(new String[stringFeatureList.size()]));
					schoolResponsePOJOs.add(responsePOJO);
				}

				managementLicenseResponsePOJOs.setSchools(schoolResponsePOJOs);

				finalResultPOJO.setMemberType("Principal");
				finalResultPOJO.setManagements(managementLicenseResponsePOJO);
				finalResultPOJO.setStatus("Success");

				return finalResultPOJO;

			} else {

				finalResultPOJO.setStatus("Invalid User");
				return finalResultPOJO;
			}
		} catch (Exception e) {
			FinalResultPOJO finalResultPOJO = new FinalResultPOJO();
			finalResultPOJO.setStatus("Failed");
		}
		return licenseRequestPOJO;

	}

	@RequestMapping(value = "/otp/get", produces = { "application/json" }, method = RequestMethod.POST)

	public @ResponseBody Object getOtpFromDevice(HttpServletRequest request,
			@RequestBody LicenseRequestPOJO licensePOJO) throws IOException {
		
		
		try {
			boolean checkPhoneNumber = managementMemberDAO.checkPhoneNumber(licensePOJO.getPhoneNumber());
			System.out.println("INSIDEEEEEEEEE OTP"+checkPhoneNumber);
			
			FinalResultPOJO finalResultPOJO = new FinalResultPOJO();
			if (checkPhoneNumber == true) {
				String msg = "http://www.webpostservice.com/sendsms/otp_request.php?%20username=zoftsol&password=w93mMt&type=TEXT&sender=CWIZAD&mobile="
						+ licensePOJO.getPhoneNumber() + "";

				msg = msg.replace(" ", "%20");
				URL url = new URL(msg);
System.out.println("nooooooo>>>"+licensePOJO.getPhoneNumber());
				BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));

				String strTemp = "";
				while (null != (strTemp = br.readLine())) {
					System.out.println(strTemp);
					System.out.println("inside message sender");
				}
				finalResultPOJO.setStatus("Success");
				finalResultPOJO.setManagements(new ArrayList<>());
				return finalResultPOJO;
			} else if(checkPhoneNumber == false){
				
				finalResultPOJO.setStatus("Invalid User");
				return finalResultPOJO;

			}
			
			
			
			else	
			{
				System.out.println("outsideeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee");
				
				finalResultPOJO.setStatus("Failed");
				return finalResultPOJO;
			}
		} catch (Exception e) {
			e.printStackTrace();
			FinalResultPOJO finalResultPOJO = new FinalResultPOJO();
			finalResultPOJO.setManagements(new ArrayList<>());
			e.printStackTrace();
			finalResultPOJO.setStatus("Failed");
			return finalResultPOJO;
		}
	}
}
