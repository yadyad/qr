package com.zs.cws.superadmin.master.subject.controller;

import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;
import com.zs.cws.superadmin.master.subject.dao.SubjectDAO;
import com.zs.cws.superadmin.master.subject.model.SubjectModel;
import com.zs.cws.superadmin.master.subject.repository.SubjectRepository;

@Controller
@Scope("session")
@RequestMapping("superadmin/subject")
public class SubjectController {
	
	
	
	@Autowired
	SubjectRepository subjectRepository;

	@Autowired
	SubjectDAO subjectDAO;

	@RequestMapping()
	public ModelAndView view() {
		ModelAndView modelAndView = new ModelAndView("super_admin_subject");
		modelAndView.addObject("subject", "active");
		return modelAndView;
	}

	@RequestMapping(value = "/all", method = RequestMethod.GET)
	public @ResponseBody Object listAllUsers() {
		List<SubjectModel> subjectList = subjectRepository.findAll();
		return subjectList;
	}

	@RequestMapping(value = { "/post" }, method = RequestMethod.POST, produces = { "application/json" })
	public @ResponseBody Object getJsonData(HttpServletRequest request, @RequestBody SubjectModel subjectModel,
			HttpSession session) {
		
		String loggedUser = (String) session.getAttribute("loggedUser");
		if (!subjectDAO.isAvailable(subjectModel)) {
			subjectModel.setCreatedUser(loggedUser);
			subjectModel.setUpdatedUser(loggedUser);
			subjectModel.setCreatedDate(new Date());
			subjectModel.setUpdatedDate(new Date());
		
			subjectRepository.save(subjectModel);
			return subjectModel;
		} else {
			System.out.println("DUplicate");
			return null;
		}
	}

	@RequestMapping(value = "/deleteItems/{id}", method = RequestMethod.GET)
	public @ResponseBody Object deleteItems(@PathVariable("id") int[] subIDs) {
		for (int subjectId : subIDs) {
			if (subjectId != 0) {
				subjectRepository.delete(subjectId);
			}
		}
		return true;
	}

	@RequestMapping(value = "/deleteSingleItem/{id}", method = RequestMethod.GET)
	public @ResponseBody Object deleteItems(@PathVariable("id") int subId) {
		if (subId != 0) {
			subjectRepository.delete(subId);
			return true;
		}
		return false;
	}

	/*@RequestMapping(value = "/dropDown", method = RequestMethod.GET)
	public @ResponseBody Object deptMap() {
		List<DepartmentModel> depList = departmentRepository.findAll();
		Map<Integer, String> managMap = new HashMap<>();
		for (DepartmentModel departmentModel : depList) {
			managMap.put(departmentModel.getRowId(), departmentModel.getDepartment());
		}
		return managMap;
	}*/


}
