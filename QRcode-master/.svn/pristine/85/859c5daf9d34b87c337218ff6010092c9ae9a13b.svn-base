package com.zs.cws.ws.hybrid.kudos.controller;

import java.util.List;
import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import com.zs.cws.schooladmin.kudos.dao.KudosDAO;
import com.zs.cws.schooladmin.kudos.model.KudosModel;
import com.zs.cws.schooladmin.kudos.repository.KudosRepository;
import com.zs.cws.superadmin.managementmembers.dao.ManagementMemberDAO;
import com.zs.cws.superadmin.managementmembers.repository.ManagementMemberRepository;
import com.zs.cws.superadmin.school.dao.SchoolDAO;
import com.zs.cws.superadmin.school.model.SchoolModel;
import com.zs.cws.superadmin.school.repository.SchoolRepository;
import com.zs.cws.superadmin.schoolstaff.dao.SchoolStaffDAO;
import com.zs.cws.superadmin.schoolstaff.repository.SchoolStaffRepository;
import com.zs.cws.utils.FCMGroupSender;
import com.zs.cws.ws.hybrid.kudos.dao.KudosServiceDAO;
import com.zs.cws.ws.hybrid.kudos.model.KudosFCMModel;
import com.zs.cws.ws.hybrid.kudos.model.KudosFinalModel;
import com.zs.cws.ws.hybrid.kudos.model.KudosLikesModel;
import com.zs.cws.ws.hybrid.kudos.model.KudosRequestModel;
import com.zs.cws.ws.hybrid.kudos.model.KudosResponseModel;
import com.zs.cws.ws.hybrid.kudos.repository.KudosServiceRepository;

@RestController
public class KudoseServiceController {

	@Autowired
	KudosDAO kudosDAO;

	@Autowired
	KudosServiceRepository kudosServiceRepository;

	@Autowired
	SchoolRepository schoolRepository;

	@Autowired
	SchoolDAO schoolDAO;

	@Autowired
	KudosServiceDAO kudosServiceDAO;

	@Autowired
	ManagementMemberDAO managementMemberDAO;

	@Autowired
	ManagementMemberRepository managementRepository;

	@Autowired
	SchoolStaffDAO schoolStaffDAO;

	@Autowired
	SchoolStaffRepository schoolStaffRepository;

	@Autowired
	KudosRepository kudosRepository;

	@RequestMapping(value = "kudos", produces = { "application/json" }, method = RequestMethod.POST)
	public @ResponseBody Object listAll(HttpServletRequest request, @RequestBody KudosRequestModel kudosRequestModel) {

		try {
			KudosFinalModel finalModel2 = new KudosFinalModel();
			if (kudosRequestModel.getMemberType().equalsIgnoreCase("Principal")
					|| kudosRequestModel.getMemberType().equalsIgnoreCase("T")) {
				if (schoolStaffDAO.isValidMemberStaff(kudosRequestModel.getMemberId())) {// staff
					List<KudosResponseModel> kudosModels = kudosDAO.getKudosDetails(kudosRequestModel);
					finalModel2.setResponseStatus("Success");
					finalModel2.setKudosResponseModels(kudosModels);

					finalModel2.setStatus(kudosRequestModel.getRequestStatus());

				} else {
					finalModel2.setResponseStatus("Invalid User");
				}

			} else if (kudosRequestModel.getMemberType().equalsIgnoreCase("Management")) {// management
				if (managementMemberDAO.isValidMember(kudosRequestModel.getMemberId())) {
					List<KudosResponseModel> kudosModels = kudosDAO.getKudosDetails(kudosRequestModel);
					finalModel2.setKudosResponseModels(kudosModels);
					finalModel2.setResponseStatus("Success");
					finalModel2.setStatus(kudosRequestModel.getRequestStatus());
				} else {
					finalModel2.setResponseStatus("Invalid User");
				}
			} else if (kudosRequestModel.getMemberType().equalsIgnoreCase("Parent")
					|| kudosRequestModel.getMemberType().equalsIgnoreCase("P")) {
				if (managementMemberDAO.isValidMemberParent(kudosRequestModel.getMemberId())) {
					List<KudosResponseModel> kudosModels = kudosDAO.getKudosDetails(kudosRequestModel);
					finalModel2.setKudosResponseModels(kudosModels);
					finalModel2.setResponseStatus("Success");
					finalModel2.setStatus(kudosRequestModel.getRequestStatus());
				} else {
					finalModel2.setResponseStatus("Invalid User");
				}

			} else {
				finalModel2.setResponseStatus("Invalid Type");
			}
			return finalModel2;
		} catch (Exception e) {
			e.printStackTrace();
			KudosFinalModel finalModel2 = new KudosFinalModel();
			finalModel2.setResponseStatus("Failed");
			return finalModel2;
		}

	}

	@RequestMapping(value = "kudoslikes", produces = { "application/json" }, method = RequestMethod.POST)
	public @ResponseBody Object listAllkudosLikes(HttpServletRequest request,
			@RequestBody KudosRequestModel kudosRequestModel) {
		try {
			KudosFinalModel finalModel2 = new KudosFinalModel();
			KudosLikesModel kudosLikesModel = new KudosLikesModel();
			if (kudosRequestModel.getMemberType().equalsIgnoreCase("Principal")
					|| kudosRequestModel.getMemberType().equals("T")) {

				if (schoolStaffDAO.isValidMemberStaffLike(kudosRequestModel.getMemberId())) {// staff

					if (kudosServiceDAO.alreadyLiked(kudosRequestModel)) {
						finalModel2.setResponseStatus("Success");
						finalModel2.setKudosLikeCount(kudosServiceDAO.getLikeCounts(kudosRequestModel.getKudosId()));
						finalModel2.setKudosID(kudosRequestModel.getKudosId());
						finalModel2.setSchoolID(kudosRequestModel.getSchoolId());
						KudosFCMModel fcmModel =new KudosFCMModel();
						fcmModel.setKudosID(finalModel2.getKudosID());
						fcmModel.setKudosCount(finalModel2.getKudosLikeCount());
						fcmModel.setSchoolID(finalModel2.getSchoolID());
						FCMGroupSender.fcmForGroup(fcmModel,"Kudos");
						return finalModel2;
					} else {

						KudosModel kudosModel = kudosRepository.findOne(kudosRequestModel.getKudosId());
						kudosLikesModel.setKudosModel(kudosModel);
						kudosLikesModel.setMemberType("Principal");
						SchoolModel schoolModel = schoolRepository.findOne(kudosRequestModel.getSchoolId());
						kudosLikesModel.setSchoolModel(schoolModel);
						kudosLikesModel.setStaffID(kudosRequestModel.getMemberId());
						kudosServiceRepository.save(kudosLikesModel);
						finalModel2.setResponseStatus("Success");
						finalModel2.setKudosLikeCount(kudosServiceDAO.getLikeCounts(kudosRequestModel.getKudosId()));
						finalModel2.setKudosID(kudosRequestModel.getKudosId());
						finalModel2.setSchoolID(kudosRequestModel.getSchoolId());
						KudosFCMModel fcmModel =new KudosFCMModel();
						fcmModel.setKudosID(finalModel2.getKudosID());
						fcmModel.setKudosCount(finalModel2.getKudosLikeCount());
						fcmModel.setSchoolID(finalModel2.getSchoolID());
						FCMGroupSender.fcmForGroup(fcmModel,"Kudos");
					}

				} else {

					finalModel2.setResponseStatus("Invalid User");
				}

			} else if (kudosRequestModel.getMemberType().equalsIgnoreCase("Management")) {// management

				if (managementMemberDAO.isValidMember(kudosRequestModel.getMemberId())) {

					if (kudosServiceDAO.alreadyLiked(kudosRequestModel)) {
						finalModel2.setResponseStatus("Success");
						finalModel2.setKudosLikeCount(kudosServiceDAO.getLikeCounts(kudosRequestModel.getKudosId()));
						finalModel2.setKudosID(kudosRequestModel.getKudosId());
						finalModel2.setSchoolID(kudosRequestModel.getSchoolId());
						KudosFCMModel fcmModel =new KudosFCMModel();
						fcmModel.setKudosID(finalModel2.getKudosID());
						fcmModel.setKudosCount(finalModel2.getKudosLikeCount());
						fcmModel.setSchoolID(finalModel2.getSchoolID());
						FCMGroupSender.fcmForGroup(fcmModel,"Kudos");
						return finalModel2;

					} else {

						KudosModel kudosModel = kudosRepository.findOne(kudosRequestModel.getKudosId());
						kudosLikesModel.setKudosModel(kudosModel);
						kudosLikesModel.setMemberType("Management");
						SchoolModel schoolModel = schoolRepository.findOne(kudosRequestModel.getSchoolId());
						kudosLikesModel.setSchoolModel(schoolModel);
						kudosLikesModel.setStaffID(kudosRequestModel.getMemberId());
						kudosServiceRepository.save(kudosLikesModel);
						finalModel2.setResponseStatus("Success");
						finalModel2.setKudosLikeCount(kudosServiceDAO.getLikeCounts(kudosRequestModel.getKudosId()));
						finalModel2.setKudosID(kudosRequestModel.getKudosId());
						finalModel2.setSchoolID(kudosRequestModel.getSchoolId());
						KudosFCMModel fcmModel =new KudosFCMModel();
						fcmModel.setKudosID(finalModel2.getKudosID());
						fcmModel.setKudosCount(finalModel2.getKudosLikeCount());
						fcmModel.setSchoolID(finalModel2.getSchoolID());
						FCMGroupSender.fcmForGroup(fcmModel,"Kudos");
					}

				} else {

					finalModel2.setResponseStatus("Invalid User");

				}
			} else if (kudosRequestModel.getMemberType().equalsIgnoreCase("Parent")
					|| kudosRequestModel.getMemberType().equals("P")) {

				if (managementMemberDAO.isValidMemberParent(kudosRequestModel.getMemberId())) {

					if (kudosServiceDAO.alreadyLiked(kudosRequestModel)) {
						System.out.println("INSIDE IF");
						finalModel2.setResponseStatus("Success");
						finalModel2.setKudosLikeCount(kudosServiceDAO.getLikeCounts(kudosRequestModel.getKudosId()));
						finalModel2.setKudosID(kudosRequestModel.getKudosId());
						finalModel2.setSchoolID(kudosRequestModel.getSchoolId());
						KudosFCMModel fcmModel =new KudosFCMModel();
						fcmModel.setKudosID(finalModel2.getKudosID());
						fcmModel.setKudosCount(finalModel2.getKudosLikeCount());
						fcmModel.setSchoolID(finalModel2.getSchoolID());
						FCMGroupSender.fcmForGroup(fcmModel,"Kudos");
						return finalModel2;

					} else {

						KudosModel kudosModel = kudosRepository.findOne(kudosRequestModel.getKudosId());
						kudosLikesModel.setKudosModel(kudosModel);
						kudosLikesModel.setMemberType("Parent");
						SchoolModel schoolModel = schoolRepository.findOne(kudosRequestModel.getSchoolId());
						kudosLikesModel.setSchoolModel(schoolModel);
						kudosLikesModel.setStaffID(kudosRequestModel.getMemberId());
						kudosServiceRepository.save(kudosLikesModel);
						System.out.println("INSIDE ELSE");
						finalModel2.setResponseStatus("Success");
						finalModel2.setKudosLikeCount(kudosServiceDAO.getLikeCounts(kudosRequestModel.getKudosId()));
						finalModel2.setKudosID(kudosRequestModel.getKudosId());
						finalModel2.setSchoolID(kudosRequestModel.getSchoolId());
						KudosFCMModel fcmModel =new KudosFCMModel();
						fcmModel.setKudosID(finalModel2.getKudosID());
						fcmModel.setKudosCount(finalModel2.getKudosLikeCount());
						fcmModel.setSchoolID(finalModel2.getSchoolID());
						FCMGroupSender.fcmForGroup(fcmModel,"Kudos");
					}

				} else {
					finalModel2.setResponseStatus("Invalid User");
				}
			} else {
				finalModel2.setResponseStatus("Invalid Type");
			}

			return finalModel2;
		} catch (Exception e) {
			KudosFinalModel finalModel2 = new KudosFinalModel();
			finalModel2.setStatus("Failed");
			return finalModel2;
		}
	}
}
